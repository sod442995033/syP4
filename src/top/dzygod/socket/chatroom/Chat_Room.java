package top.dzygod.socket.chatroom;import java.awt.*;import java.awt.event.*;import java.io.*;import java.net.*;import java.text.SimpleDateFormat;import java.util.Date;/** * @Author: dingziyuan * @Date: 2018/7/28 18:07 * @Description: 聊天室 */public class Chat_Room extends Frame {    private Button send;    private Button log;    private Button clean;    private Button shake;    private TextField field;    private TextArea viewText;    private TextArea sendText;    private BufferedWriter fileWriter;    private DatagramSocket socket;    public Chat_Room() throws HeadlessException {        init();        downPanel();        centerPanel();        event();    }    private void event() {        this.addWindowListener(new WindowAdapter() {            @Override            public void windowClosing(WindowEvent e) {                try {                    socket.close();                    fileWriter.close();                    System.exit(0);                } catch (IOException e1) {                    e1.printStackTrace();                }            }        });        send.addActionListener((event) -> {            send();        });        log.addActionListener((event) -> {            try {                history();            } catch (IOException e) {                e.printStackTrace();            }        });        clean.addActionListener(e -> {            viewText.setText("");        });        shake.addActionListener(e -> {            try {                send("/shake", field.getText());            } catch (IOException e1) {                e1.printStackTrace();            }        });        sendText.addKeyListener(new KeyAdapter() {            @Override            public void keyPressed(KeyEvent e) {                if (e.getKeyCode() == KeyEvent.VK_ENTER) {                    send();                }            }        });    }    private void shake() throws InterruptedException {        int x = this.getX();        int y = this.getY();        for (int i = 0; i < 20; i++) {            this.setLocation(x + 5, y + 5);            Thread.sleep(20);            this.setLocation(x - 5, y - 5);            Thread.sleep(20);            this.setLocation(x + 10, y - 10);            Thread.sleep(20);            this.setLocation(x - 10, y + 10);            Thread.sleep(20);            this.setLocation(x, y);        }    }    private void history() throws IOException {        fileWriter.flush();        //读        FileInputStream inputStream = new FileInputStream("history.txt");        ByteArrayOutputStream stream = new ByteArrayOutputStream();        byte[] arr = new byte[1024 * 8];        int len = 1024 * 8;        if (-1 != (inputStream.read(arr))) {            stream.write(arr, 0, len);        }        String message = stream.toString();        viewText.setText(message);    }    private void send() {        String send = sendText.getText();        String ip = field.getText();        try {            send(send, ip);            String dated = getCurrenTime();            if ("".equals(ip.trim()) && ip.length() == 0) {                ip = "255.255.255.255";            }            String str = dated + " 我对" + ("255.255.255.255".equals(ip) ? "所有人" : ip)                    + "说:\r\n" + send + "\r\n\n";            viewText.append(str);            sendText.setText("");            fileWriter.write(str);        } catch (SocketException e) {            e.printStackTrace();        } catch (UnknownHostException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    private void send(String send, String ip) throws IOException {        DatagramPacket packet = new DatagramPacket(send.getBytes(), send.getBytes().length,                InetAddress.getByName(ip), 6666);        socket.send(packet);    }    private String getCurrenTime() {        Date date = new Date();        SimpleDateFormat format = new SimpleDateFormat("yyyy年MM月dd日 hh:mm:ss");        return format.format(date);    }    private void centerPanel() {        Panel center = new Panel();        viewText = new TextArea();        sendText = new TextArea(3, 1);        //设置为边界布局管理器        center.setLayout(new BorderLayout());        center.add(sendText, BorderLayout.SOUTH);        center.add(viewText, BorderLayout.CENTER);        viewText.setEditable(false);        viewText.setBackground(Color.WHITE);        viewText.setFont(new Font("xx", Font.BOLD, 20));        sendText.setFont(new Font("xx", Font.PLAIN, 30));        this.add(center, BorderLayout.CENTER);    }    private void downPanel() {        Panel down = new Panel();        field = new TextField(15);        send = new Button("发送");        log = new Button("记录");        clean = new Button("清屏");        shake = new Button("震动");        down.add(field);        down.add(send);        down.add(log);        down.add(clean);        down.add(shake);        this.add(down, BorderLayout.SOUTH);    }    private void init() {        this.setLocation(700, 100);        this.setSize(550, 800);        this.setVisible(true);        new Receive().start();        try {            socket = new DatagramSocket();            File file = new File("history.txt");            FileWriter writer = new FileWriter(file, true);            fileWriter = new BufferedWriter(writer);        } catch (IOException e) {            e.printStackTrace();        }    }    public static void main(String[] args) {        Chat_Room room = new Chat_Room();    }    private class Receive extends Thread {        @Override        public void run() {            try (                    DatagramSocket socket = new DatagramSocket(6666);            ) {                while (true) {                    DatagramPacket packet =                            new DatagramPacket(new byte[1024 * 8], 1024 * 8);                    socket.receive(packet);                    byte[] data = packet.getData();                    int length = packet.getLength();                    String dated = getCurrenTime();                    InetAddress address = packet.getAddress();                    String name = address.getHostAddress();                    String message = new String(data, 0, length);                    if ("/shake".equals(message)) {                        shake();                        continue;                    }                    String str = dated + " " + name + "对我说:\r\n" + message + "\r\n\n";                    viewText.append(str);                    fileWriter.write(str);                }            } catch (SocketException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}